"use client"

import { useState, useEffect } from "react"
import { useSearchParams, useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Youtube, ArrowLeft, CheckCircle, AlertCircle, Loader2, DollarSign } from "lucide-react"
import Link from "next/link"
import { useAuth } from "@/hooks/useAuth"
import { api } from "@/lib/api"

export default function BuyPlanPage() {
  const { user, isAuthenticated, loading: authLoading } = useAuth()
  const router = useRouter()
  const searchParams = useSearchParams()
  const planId = searchParams.get("planId")

  const [plan, setPlan] = useState(null)
  const [loading, setLoading] = useState(true)
  const [submitting, setSubmitting] = useState(false)
  const [error, setError] = useState(null)
  const [success, setSuccess] = useState(false)

  const [formData, setFormData] = useState({
    channelName: "",
    channelUrl: "",
    currentSubscribers: "",
    targetSubscribers: "",
    description: "",
  })

  const [errors, setErrors] = useState({})

  useEffect(() => {
    if (!authLoading && !isAuthenticated) {
      router.push("/login")
      return
    }

    if (planId && isAuthenticated) {
      fetchPlan()
    }
  }, [planId, isAuthenticated, authLoading, router])

  const fetchPlan = async () => {
    try {
      setLoading(true)
      const response = await api.getPlan(planId)
      setPlan(response.plan)
    } catch (error) {
      console.error("Failed to fetch plan:", error)
      setError(error.message)
    } finally {
      setLoading(false)
    }
  }

  const validateForm = () => {
    const newErrors = {}

    if (!formData.channelName.trim()) {
      newErrors.channelName = "Channel name is required"
    }

    if (!formData.channelUrl.trim()) {
      newErrors.channelUrl = "Channel URL is required"
    } else if (!formData.channelUrl.includes("youtube.com")) {
      newErrors.channelUrl = "Please enter a valid YouTube channel URL"
    }

    if (!formData.currentSubscribers) {
      newErrors.currentSubscribers = "Current subscribers count is required"
    } else if (Number.parseInt(formData.currentSubscribers) < 0) {
      newErrors.currentSubscribers = "Subscribers count cannot be negative"
    }

    if (!formData.targetSubscribers) {
      newErrors.targetSubscribers = "Target subscribers count is required"
    } else if (Number.parseInt(formData.targetSubscribers) <= Number.parseInt(formData.currentSubscribers)) {
      newErrors.targetSubscribers = "Target subscribers must be greater than current subscribers"
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleInputChange = (e) => {
    const { name, value } = e.target
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }))
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors((prev) => ({
        ...prev,
        [name]: "",
      }))
    }
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    if (!validateForm()) return

    setSubmitting(true)
    setError(null)

    try {
      await api.createDeal({
        planId: Number.parseInt(planId),
        ...formData,
        currentSubscribers: Number.parseInt(formData.currentSubscribers),
        targetSubscribers: Number.parseInt(formData.targetSubscribers),
      })

      setSuccess(true)
      // Redirect to dashboard after 3 seconds
      setTimeout(() => {
        router.push("/dashboard")
      }, 3000)
    } catch (error) {
      console.error("Failed to create deal:", error)
      setError(error.message)
    } finally {
      setSubmitting(false)
    }
  }

  if (authLoading || loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="h-12 w-12 animate-spin text-purple-400 mx-auto mb-4" />
          <p className="text-white/80">Loading plan details...</p>
        </div>
      </div>
    )
  }

  if (error && !plan) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex items-center justify-center p-4">
        <Alert className="max-w-md bg-red-500/20 border-red-500/50 text-red-200">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>
            Failed to load plan: {error}
            <Link href="/#pricing">
              <Button className="mt-2 bg-red-600 hover:bg-red-700 w-full">Back to Plans</Button>
            </Link>
          </AlertDescription>
        </Alert>
      </div>
    )
  }

  if (success) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex items-center justify-center p-4">
        <Card className="w-full max-w-md bg-white/10 backdrop-blur-md border-white/20 shadow-2xl">
          <CardContent className="pt-6 text-center">
            <CheckCircle className="w-16 h-16 text-green-400 mx-auto mb-4" />
            <h2 className="text-2xl font-bold text-white mb-2">Deal Created Successfully!</h2>
            <p className="text-white/80 mb-4">
              Your deal request has been submitted. Our admin will review it and start working on your channel growth.
            </p>
            <p className="text-white/60 text-sm mb-6">Redirecting to dashboard in 3 seconds...</p>
            <Link href="/dashboard">
              <Button className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700">
                Go to Dashboard
              </Button>
            </Link>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 relative overflow-hidden">
      {/* Animated Background Elements */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse"></div>
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-blue-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse delay-1000"></div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-pink-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse delay-500"></div>
      </div>

      {/* Navigation */}
      <nav className="relative z-50 backdrop-blur-md bg-white/10 border-b border-white/20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <Link href="/" className="flex items-center space-x-2">
              <Youtube className="h-8 w-8 text-red-500" />
              <span className="text-2xl font-bold text-white">CreatorHub</span>
            </Link>
            <Link href="/dashboard">
              <Button variant="outline" className="border-white/20 text-white hover:bg-white/10 bg-transparent">
                <ArrowLeft className="w-4 h-4 mr-2" />
                Back to Dashboard
              </Button>
            </Link>
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <div className="relative z-10 max-w-4xl mx-auto px-4 py-12">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-white mb-4">Complete Your Deal</h1>
          <p className="text-white/80">Provide your YouTube channel information to get started</p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Plan Details */}
          {plan && (
            <Card className="bg-white/10 backdrop-blur-md border-white/20 shadow-2xl">
              <CardHeader>
                <CardTitle className="text-white flex items-center">
                  <DollarSign className="w-5 h-5 mr-2 text-green-400" />
                  {plan.name}
                </CardTitle>
                <CardDescription className="text-white/80">{plan.description}</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="text-center p-4 bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-lg">
                  <div className="text-3xl font-bold text-white mb-1">${plan.price}</div>
                  <div className="text-white/80">One-time payment</div>
                </div>
                <div className="space-y-2">
                  <h4 className="font-semibold text-white">What you'll get:</h4>
                  {plan.features?.map((feature, index) => (
                    <div key={index} className="flex items-center space-x-2">
                      <CheckCircle className="w-4 h-4 text-green-400" />
                      <span className="text-white/90 text-sm">{feature}</span>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          {/* Channel Information Form */}
          <Card className="bg-white/10 backdrop-blur-md border-white/20 shadow-2xl">
            <CardHeader>
              <CardTitle className="text-white">YouTube Channel Information</CardTitle>
              <CardDescription className="text-white/80">
                Tell us about your channel so we can provide the best service
              </CardDescription>
            </CardHeader>
            <CardContent>
              {error && (
                <Alert className="mb-6 bg-red-500/20 border-red-500/50 text-red-200">
                  <AlertCircle className="h-4 w-4" />
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}

              <form onSubmit={handleSubmit} className="space-y-4">
                {/* Channel Name */}
                <div className="space-y-2">
                  <Label htmlFor="channelName" className="text-white">
                    Channel Name *
                  </Label>
                  <Input
                    id="channelName"
                    name="channelName"
                    placeholder="Enter your YouTube channel name"
                    value={formData.channelName}
                    onChange={handleInputChange}
                    className="bg-white/10 border-white/20 text-white placeholder:text-white/60 focus:border-purple-400"
                  />
                  {errors.channelName && (
                    <Alert className="bg-red-500/20 border-red-500/50 text-red-200">
                      <AlertCircle className="h-4 w-4" />
                      <AlertDescription>{errors.channelName}</AlertDescription>
                    </Alert>
                  )}
                </div>

                {/* Channel URL */}
                <div className="space-y-2">
                  <Label htmlFor="channelUrl" className="text-white">
                    Channel URL *
                  </Label>
                  <Input
                    id="channelUrl"
                    name="channelUrl"
                    placeholder="https://youtube.com/@yourchannel"
                    value={formData.channelUrl}
                    onChange={handleInputChange}
                    className="bg-white/10 border-white/20 text-white placeholder:text-white/60 focus:border-purple-400"
                  />
                  {errors.channelUrl && (
                    <Alert className="bg-red-500/20 border-red-500/50 text-red-200">
                      <AlertCircle className="h-4 w-4" />
                      <AlertDescription>{errors.channelUrl}</AlertDescription>
                    </Alert>
                  )}
                </div>

                {/* Current Subscribers */}
                <div className="space-y-2">
                  <Label htmlFor="currentSubscribers" className="text-white">
                    Current Subscribers *
                  </Label>
                  <Input
                    id="currentSubscribers"
                    name="currentSubscribers"
                    type="number"
                    placeholder="e.g., 1000"
                    value={formData.currentSubscribers}
                    onChange={handleInputChange}
                    className="bg-white/10 border-white/20 text-white placeholder:text-white/60 focus:border-purple-400"
                  />
                  {errors.currentSubscribers && (
                    <Alert className="bg-red-500/20 border-red-500/50 text-red-200">
                      <AlertCircle className="h-4 w-4" />
                      <AlertDescription>{errors.currentSubscribers}</AlertDescription>
                    </Alert>
                  )}
                </div>

                {/* Target Subscribers */}
                <div className="space-y-2">
                  <Label htmlFor="targetSubscribers" className="text-white">
                    Target Subscribers *
                  </Label>
                  <Input
                    id="targetSubscribers"
                    name="targetSubscribers"
                    type="number"
                    placeholder="e.g., 5000"
                    value={formData.targetSubscribers}
                    onChange={handleInputChange}
                    className="bg-white/10 border-white/20 text-white placeholder:text-white/60 focus:border-purple-400"
                  />
                  {errors.targetSubscribers && (
                    <Alert className="bg-red-500/20 border-red-500/50 text-red-200">
                      <AlertCircle className="h-4 w-4" />
                      <AlertDescription>{errors.targetSubscribers}</AlertDescription>
                    </Alert>
                  )}
                </div>

                {/* Description */}
                <div className="space-y-2">
                  <Label htmlFor="description" className="text-white">
                    Channel Description (Optional)
                  </Label>
                  <Textarea
                    id="description"
                    name="description"
                    placeholder="Tell us about your channel content, niche, target audience..."
                    value={formData.description}
                    onChange={handleInputChange}
                    rows={4}
                    className="bg-white/10 border-white/20 text-white placeholder:text-white/60 focus:border-purple-400"
                  />
                </div>

                {/* Submit Button */}
                <Button
                  type="submit"
                  disabled={submitting}
                  className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white font-semibold py-3 transition-all duration-300"
                >
                  {submitting ? (
                    <div className="flex items-center">
                      <Loader2 className="animate-spin h-4 w-4 mr-2" />
                      Creating Deal...
                    </div>
                  ) : (
                    <>
                      <CheckCircle className="w-4 h-4 mr-2" />
                      Create Deal - ${plan?.price}
                    </>
                  )}
                </Button>
              </form>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}
